int solve(int n,vector <int> &nums,vector <int> &dp){
//     dp[0] = nums[0];
//     for(int i = 1;i < n;i++){
//         int pick = nums[i];
//         if(n > 1) pick += dp[i - 2];
//         int notpick = dp[i - 1];
//         dp[i] = max(pick,notpick);
//     }
//     return dp[n - 1];
    if(n == 0) return nums[n];
    if(n < 0) return 0;
    if(dp[n] != -1) return dp[n];
    int pick = nums[n];
    if(n > 1) pick += solve(n - 2,nums,dp);
    int notpick = solve(n - 1,nums,dp);
    return max(pick,notpick);
}
int maximumNonAdjacentSum(vector<int> &nums){
    int n = nums.size();
    vector <int> dp(n, -1
    return solve(n - 1,nums,dp);
    
// tabulation

    
    
  
 
