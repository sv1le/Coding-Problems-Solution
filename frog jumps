// memoization
// int solve(int n,vector <int> &heights,vector <int> &dp){
//     if(n == 0) return 0;
//     if(dp[n] != - 1) return dp[n];
//     int left = solve(n  - 1,heights,dp) + abs(heights[n] - heights[n - 1]);
//     int right = INT_MAX;
//     if(n > 1){
//         right = solve(n - 2,heights,dp) + abs(heights[n] - heights[n - 2]);
//     }
//     return dp[n] = min(left,right);
// }
// int frogJump(int n, vector<int> &heights)
// {
//     vector <int> dp(n + 1,-1);
//     return solve(n - 1,heights,dp);
// }

// tabulation
int frogJump(int n, vector<int> &heights)
{
    vector <int> dp(n ,0);
    dp[0] = 0;
    for(int  i = 1;i < n;i ++){
        int fs = abs(heights[i] - heights[i - 1]) + dp[i - 1];
        int ss = INT_MAX;
        if(i > 1) ss = abs(heights[i] - heights[i - 2]) + dp[i - 2]; /// since there is dp[i - 2] and in above there is dp[i -1] spo it means we can space optimize
        dp[i] = min(fs,ss);
    }
    return dp[n - 1];
}

//space optimized

int frogJump(int n, vector<int> &heights)
{
    int prev = 0;
    int prev2 = 0;
    for(int  i = 1;i < n;i ++){
        int fs = abs(heights[i] - heights[i - 1]) + prev;
        int ss = INT_MAX;
        if(i > 1) ss = abs(heights[i] - heights[i - 2]) + prev2;
        int curri = min(fs,ss);
        prev2 = prev;
        prev = curri;
    }
    
    
    return prev;
}
