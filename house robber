//recursion
class Solution {
public:
    int solve(int n,vector <int> &nums){
        if(n == 0) return nums[0];
        if(n < 0) return 0;
        int pick = nums[n] + solve(n - 2,nums);
        int notpick = solve(n - 1,nums);
        return max(pick,notpick);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        return solve(n - 1,nums);
    }
};

//memoization
class Solution {
public:
    int solve(int n,vector <int> &nums,vector <int> &dp){
        if(n == 0) return nums[n];
        if(n < 0) return 0;
        if(dp[n] != -1) return dp[n];
        int pick = nums[n] + solve(n - 2,nums,dp);
        int notpick = solve(n - 1,nums,dp);
        return dp[n] = max(pick,notpick);
    }
    int rob(vector<int>& nums) {
        int n = nums.size();
        vector <int> dp(n ,-1);
        return solve(n - 1,nums,dp);
    }
};

//tabulation
class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        if(n == 1) return nums[0];
        vector <int> dp(n);
        dp[0] = nums[0];
        dp[1] = max(nums[1],nums[0]);
        for(int i = 2;i < n;i++){
            int pick = nums[i] + dp[i - 2];
            int notpick = dp[i - 1];
            dp[i] = max(pick,notpick);
        }
        return dp[n - 1];
    }
};
